import React, { useState, useEffect } from 'react';
import { ShoppingCart, User, Search, Menu, Star, Filter, Plus, Minus, MapPin, CreditCard, Truck, Store, Package, Heart, Eye, ChevronDown, ChevronRight } from 'lucide-react';

const BrightBuyEcommerce = () => {
  const [currentUser, setCurrentUser] = useState(null);
  const [currentPage, setCurrentPage] = useState('home');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [cartItems, setCartItems] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [showLogin, setShowLogin] = useState(false);
  const [showCart, setShowCart] = useState(false);
  const [orderHistory, setOrderHistory] = useState([]);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [selectedVariant, setSelectedVariant] = useState({});

  // Mock data based on your database schema
  const categories = [
    { CategoryID: 1, CategoryName: 'Smartphones', Description: 'Latest mobile phones and accessories', ParentCategoryID: null },
    { CategoryID: 2, CategoryName: 'Audio Devices', Description: 'Headphones, speakers, and audio equipment', ParentCategoryID: null },
    { CategoryID: 3, CategoryName: 'Laptops', Description: 'Gaming and business laptops', ParentCategoryID: null },
    { CategoryID: 4, CategoryName: 'Gaming', Description: 'Gaming consoles and accessories', ParentCategoryID: null },
    { CategoryID: 5, CategoryName: 'Smart Home', Description: 'IoT and smart home devices', ParentCategoryID: null },
    { CategoryID: 6, CategoryName: 'Wearables', Description: 'Smartwatches and fitness trackers', ParentCategoryID: null },
    { CategoryID: 7, CategoryName: 'Tablets', Description: 'iPads and Android tablets', ParentCategoryID: null },
    { CategoryID: 8, CategoryName: 'Cameras', Description: 'Digital cameras and accessories', ParentCategoryID: null },
    { CategoryID: 9, CategoryName: 'Accessories', Description: 'Phone cases, cables, and more', ParentCategoryID: null },
    { CategoryID: 10, CategoryName: 'TV & Entertainment', Description: 'Smart TVs and streaming devices', ParentCategoryID: null }
  ];

  const products = [
    {
      ProductID: 1,
      ProductName: 'iPhone 15 Pro',
      Description: 'Latest iPhone with titanium design',
      Brand: 'Apple',
      Base_price: 999,
      CategoryID: 1,
      Availability: true,
      SKU: 'IP15P001',
      image: 'https://images.unsplash.com/photo-1592750475338-74b7b21085ab?w=400',
      rating: 4.8,
      reviews: 2341
    },
    {
      ProductID: 2,
      ProductName: 'Samsung Galaxy S24',
      Description: 'AI-powered Android flagship',
      Brand: 'Samsung',
      Base_price: 899,
      CategoryID: 1,
      Availability: true,
      SKU: 'SGS24001',
      image: 'https://images.unsplash.com/photo-1610945265064-0e34e5519bbf?w=400',
      rating: 4.6,
      reviews: 1876
    },
    {
      ProductID: 3,
      ProductName: 'MacBook Air M3',
      Description: '13-inch laptop with M3 chip',
      Brand: 'Apple',
      Base_price: 1299,
      CategoryID: 3,
      Availability: true,
      SKU: 'MBA13M3',
      image: 'https://images.unsplash.com/photo-1541807084-5c52b6b3adef?w=400',
      rating: 4.9,
      reviews: 987
    },
    {
      ProductID: 4,
      ProductName: 'Sony WH-1000XM5',
      Description: 'Premium noise-canceling headphones',
      Brand: 'Sony',
      Base_price: 399,
      CategoryID: 2,
      Availability: true,
      SKU: 'SWXM5001',
      image: 'https://images.unsplash.com/photo-1583394838336-acd977736f90?w=400',
      rating: 4.7,
      reviews: 3421
    },
    {
      ProductID: 5,
      ProductName: 'PlayStation 5',
      Description: 'Next-gen gaming console',
      Brand: 'Sony',
      Base_price: 499,
      CategoryID: 4,
      Availability: true,
      SKU: 'PS5CONS',
      image: 'https://images.unsplash.com/photo-1607853202273-797f1c22a38e?w=400',
      rating: 4.8,
      reviews: 5632
    },
    {
      ProductID: 6,
      ProductName: 'iPad Pro 12.9"',
      Description: 'Professional tablet with M2 chip',
      Brand: 'Apple',
      Base_price: 1099,
      CategoryID: 7,
      Availability: true,
      SKU: 'IPADP129',
      image: 'https://images.unsplash.com/photo-1544244015-0df4b3ffc6b0?w=400',
      rating: 4.6,
      reviews: 1234
    },
    {
      ProductID: 7,
      ProductName: 'Apple Watch Series 9',
      Description: 'Advanced fitness and health tracking',
      Brand: 'Apple',
      Base_price: 399,
      CategoryID: 6,
      Availability: true,
      SKU: 'AWS9001',
      image: 'https://images.unsplash.com/photo-1551816230-ef5deaed4a26?w=400',
      rating: 4.5,
      reviews: 2987
    },
    {
      ProductID: 8,
      ProductName: 'Samsung 65" QLED TV',
      Description: '4K Smart TV with Quantum Dot technology',
      Brand: 'Samsung',
      Base_price: 1299,
      CategoryID: 10,
      Availability: true,
      SKU: 'SQ65TV01',
      image: 'https://images.unsplash.com/photo-1593359677879-a4bb92f829d1?w=400',
      rating: 4.4,
      reviews: 876
    }
  ];

  const variants = [
    // iPhone 15 Pro variants
    { VariantID: 1, ProductID: 1, colour: 'Natural Titanium', size: '128GB', Model: 'Standard', Varient_Price: 999, StockQuantity: 25 },
    { VariantID: 2, ProductID: 1, colour: 'Blue Titanium', size: '256GB', Model: 'Standard', Varient_Price: 1099, StockQuantity: 18 },
    { VariantID: 3, ProductID: 1, colour: 'White Titanium', size: '512GB', Model: 'Standard', Varient_Price: 1299, StockQuantity: 12 },
    
    // Samsung Galaxy S24 variants
    { VariantID: 4, ProductID: 2, colour: 'Phantom Black', size: '128GB', Model: 'Standard', Varient_Price: 899, StockQuantity: 30 },
    { VariantID: 5, ProductID: 2, colour: 'Cream', size: '256GB', Model: 'Standard', Varient_Price: 999, StockQuantity: 22 },
    
    // MacBook Air M3 variants
    { VariantID: 6, ProductID: 3, colour: 'Silver', size: '256GB', Model: '8GB RAM', Varient_Price: 1299, StockQuantity: 15 },
    { VariantID: 7, ProductID: 3, colour: 'Space Gray', size: '512GB', Model: '16GB RAM', Varient_Price: 1599, StockQuantity: 8 },
    
    // Other products with single variants
    { VariantID: 8, ProductID: 4, colour: 'Black', size: 'Standard', Model: 'XM5', Varient_Price: 399, StockQuantity: 45 },
    { VariantID: 9, ProductID: 5, colour: 'White', size: 'Standard', Model: 'Standard', Varient_Price: 499, StockQuantity: 20 },
    { VariantID: 10, ProductID: 6, colour: 'Silver', size: '128GB', Model: 'Wi-Fi', Varient_Price: 1099, StockQuantity: 12 },
    { VariantID: 11, ProductID: 7, colour: 'Midnight', size: '45mm', Model: 'GPS', Varient_Price: 399, StockQuantity: 35 },
    { VariantID: 12, ProductID: 8, colour: 'Black', size: '65"', Model: 'QLED 4K', Varient_Price: 1299, StockQuantity: 8 }
  ];

  const getProductVariants = (productId) => {
    return variants.filter(v => v.ProductID === productId);
  };

  const getSelectedVariantPrice = (productId) => {
    const productVariants = getProductVariants(productId);
    const selected = selectedVariant[productId];
    if (selected && productVariants.length > 0) {
      const variant = productVariants.find(v => 
        v.colour === selected.colour && 
        v.size === selected.size && 
        v.Model === selected.Model
      );
      return variant ? variant.Varient_Price : productVariants[0].Varient_Price;
    }
    return productVariants[0]?.Varient_Price || 0;
  };

  const filteredProducts = products.filter(product => {
    const matchesCategory = selectedCategory === 'all' || product.CategoryID === parseInt(selectedCategory);
    const matchesSearch = product.ProductName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.Brand.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  const addToCart = (product) => {
    const productVariants = getProductVariants(product.ProductID);
    const selectedVar = selectedVariant[product.ProductID] || productVariants[0];
    
    const variant = productVariants.find(v => 
      v.colour === selectedVar.colour && 
      v.size === selectedVar.size && 
      v.Model === selectedVar.Model
    ) || productVariants[0];

    const existingItem = cartItems.find(item => 
      item.ProductID === product.ProductID && 
      item.VariantID === variant.VariantID
    );

    if (existingItem) {
      setCartItems(cartItems.map(item => 
        item.ProductID === product.ProductID && item.VariantID === variant.VariantID
          ? { ...item, Quantity: item.Quantity + 1 }
          : item
      ));
    } else {
      setCartItems([...cartItems, {
        CartID: Date.now(),
        ProductID: product.ProductID,
        VariantID: variant.VariantID,
        ProductName: product.ProductName,
        Brand: product.Brand,
        image: product.image,
        Quantity: 1,
        UnitPrice: variant.Varient_Price,
        colour: variant.colour,
        size: variant.size,
        Model: variant.Model
      }]);
    }
  };

  const updateQuantity = (cartId, variantId, change) => {
    setCartItems(cartItems.map(item => {
      if (item.CartID === cartId && item.VariantID === variantId) {
        const newQuantity = Math.max(0, item.Quantity + change);
        return newQuantity === 0 ? null : { ...item, Quantity: newQuantity };
      }
      return item;
    }).filter(Boolean));
  };

  const getTotalPrice = () => {
    return cartItems.reduce((total, item) => total + (item.UnitPrice * item.Quantity), 0);
  };

  const handleLogin = (email, password) => {
    // Mock login
    setCurrentUser({
      UserID: 1,
      UserName: 'John Doe',
      Email: email,
      Role: 'Customer'
    });
    setShowLogin(false);
  };

  const handleCheckout = () => {
    if (!currentUser) {
      setShowLogin(true);
      return;
    }

    const newOrder = {
      OrderID: Date.now(),
      OrderDate: new Date().toISOString(),
      Status: 'Processing',
      TotalAmount: getTotalPrice(),
      UserID: currentUser.UserID,
      items: cartItems
    };

    setOrderHistory([...orderHistory, newOrder]);
    setCartItems([]);
    setShowCart(false);
    alert('Order placed successfully!');
  };

  const HeaderComponent = () => (
    <header className="bg-gradient-to-r from-blue-600 via-purple-600 to-blue-800 text-white shadow-2xl">
      <div className="container mx-auto px-4 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <button 
              className="lg:hidden"
              onClick={() => setIsMenuOpen(!isMenuOpen)}
            >
              <Menu size={24} />
            </button>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-yellow-300 to-orange-300 bg-clip-text text-transparent">
              BrightBuy
            </h1>
          </div>
          
          <div className="hidden lg:flex flex-1 max-w-lg mx-8">
            <div className="relative w-full">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
              <input
                type="text"
                placeholder="Search products..."
                className="w-full pl-10 pr-4 py-2 rounded-full bg-white/20 backdrop-blur-sm border border-white/30 text-white placeholder-white/70 focus:outline-none focus:ring-2 focus:ring-yellow-300"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>

          <div className="flex items-center space-x-4">
            <button 
              onClick={() => setShowCart(true)}
              className="relative p-2 bg-white/20 rounded-full hover:bg-white/30 transition-all duration-300"
            >
              <ShoppingCart size={24} />
              {cartItems.length > 0 && (
                <span className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">
                  {cartItems.reduce((sum, item) => sum + item.Quantity, 0)}
                </span>
              )}
            </button>
            
            <button 
              onClick={() => currentUser ? setCurrentPage('profile') : setShowLogin(true)}
              className="flex items-center space-x-2 p-2 bg-white/20 rounded-full hover:bg-white/30 transition-all duration-300"
            >
              <User size={24} />
              <span className="hidden sm:block">
                {currentUser ? currentUser.UserName : 'Login'}
              </span>
            </button>
          </div>
        </div>

        {/* Mobile search */}
        <div className="lg:hidden mt-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
            <input
              type="text"
              placeholder="Search products..."
              className="w-full pl-10 pr-4 py-2 rounded-full bg-white/20 backdrop-blur-sm border border-white/30 text-white placeholder-white/70 focus:outline-none focus:ring-2 focus:ring-yellow-300"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>
      </div>
    </header>
  );

  const CategoryNav = () => (
    <nav className="bg-white shadow-lg border-t-4 border-gradient-to-r from-blue-500 to-purple-500">
      <div className="container mx-auto px-4">
        <div className="flex items-center space-x-8 py-4 overflow-x-auto">
          <button
            onClick={() => setSelectedCategory('all')}
            className={`whitespace-nowrap px-4 py-2 rounded-full font-medium transition-all duration-300 ${
              selectedCategory === 'all'
                ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
                : 'text-gray-600 hover:bg-gray-100'
            }`}
          >
            All Products
          </button>
          {categories.map(category => (
            <button
              key={category.CategoryID}
              onClick={() => setSelectedCategory(category.CategoryID.toString())}
              className={`whitespace-nowrap px-4 py-2 rounded-full font-medium transition-all duration-300 ${
                selectedCategory === category.CategoryID.toString()
                  ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
                  : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              {category.CategoryName}
            </button>
          ))}
        </div>
      </div>
    </nav>
  );

  const ProductCard = ({ product }) => {
    const productVariants = getProductVariants(product.ProductID);
    const currentPrice = getSelectedVariantPrice(product.ProductID);
    
    return (
      <div className="bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 overflow-hidden group">
        <div className="relative overflow-hidden">
          <img
            src={product.image}
            alt={product.ProductName}
            className="w-full h-64 object-cover group-hover:scale-110 transition-transform duration-500"
          />
          <div className="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <button className="p-2 bg-white rounded-full shadow-lg hover:bg-red-50">
              <Heart size={20} className="text-red-500" />
            </button>
          </div>
          <div className="absolute top-4 left-4">
            <span className="bg-gradient-to-r from-green-400 to-blue-500 text-white px-3 py-1 rounded-full text-sm font-medium">
              In Stock
            </span>
          </div>
        </div>

        <div className="p-6">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-blue-600 bg-blue-50 px-3 py-1 rounded-full">
              {product.Brand}
            </span>
            <div className="flex items-center space-x-1">
              <Star size={16} className="text-yellow-400 fill-current" />
              <span className="text-sm text-gray-600">{product.rating}</span>
              <span className="text-sm text-gray-400">({product.reviews})</span>
            </div>
          </div>

          <h3 className="font-bold text-lg mb-2 text-gray-800 group-hover:text-blue-600 transition-colors">
            {product.ProductName}
          </h3>
          <p className="text-gray-600 text-sm mb-4 line-clamp-2">
            {product.Description}
          </p>

          {/* Variant Selection */}
          {productVariants.length > 1 && (
            <div className="mb-4 space-y-2">
              <div className="flex flex-wrap gap-2">
                {[...new Set(productVariants.map(v => v.colour))].map(colour => (
                  <button
                    key={colour}
                    onClick={() => setSelectedVariant({
                      ...selectedVariant,
                      [product.ProductID]: {
                        ...selectedVariant[product.ProductID],
                        colour: colour
                      }
                    })}
                    className={`px-3 py-1 rounded-full text-xs font-medium transition-all ${
                      (selectedVariant[product.ProductID]?.colour || productVariants[0].colour) === colour
                        ? 'bg-blue-500 text-white'
                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                    }`}
                  >
                    {colour}
                  </button>
                ))}
              </div>
              <div className="flex flex-wrap gap-2">
                {[...new Set(productVariants.map(v => v.size))].map(size => (
                  <button
                    key={size}
                    onClick={() => setSelectedVariant({
                      ...selectedVariant,
                      [product.ProductID]: {
                        ...selectedVariant[product.ProductID],
                        size: size
                      }
                    })}
                    className={`px-3 py-1 rounded-full text-xs font-medium transition-all ${
                      (selectedVariant[product.ProductID]?.size || productVariants[0].size) === size
                        ? 'bg-purple-500 text-white'
                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                    }`}
                  >
                    {size}
                  </button>
                ))}
              </div>
            </div>
          )}

          <div className="flex items-center justify-between">
            <div className="flex flex-col">
              <span className="text-2xl font-bold text-green-600">
                ${currentPrice.toLocaleString()}
              </span>
              {currentPrice !== product.Base_price && (
                <span className="text-sm text-gray-400 line-through">
                  ${product.Base_price.toLocaleString()}
                </span>
              )}
            </div>
            
            <div className="flex space-x-2">
              <button
                onClick={() => setSelectedProduct(product)}
                className="p-2 bg-gray-100 hover:bg-gray-200 rounded-full transition-colors"
              >
                <Eye size={20} className="text-gray-600" />
              </button>
              <button
                onClick={() => addToCart(product)}
                className="bg-gradient-to-r from-blue-500 to-purple-500 text-white px-6 py-2 rounded-full hover:shadow-lg transform hover:scale-105 transition-all duration-300 flex items-center space-x-2"
              >
                <Plus size={18} />
                <span className="font-medium">Add to Cart</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const CartModal = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-hidden">
        <div className="bg-gradient-to-r from-blue-500 to-purple-500 text-white p-6">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-bold">Shopping Cart</h2>
            <button
              onClick={() => setShowCart(false)}
              className="text-white hover:bg-white/20 p-2 rounded-full"
            >
              ×
            </button>
          </div>
        </div>

        <div className="p-6 max-h-96 overflow-y-auto">
          {cartItems.length === 0 ? (
            <div className="text-center py-12">
              <ShoppingCart size={64} className="mx-auto text-gray-300 mb-4" />
              <p className="text-gray-500 text-lg">Your cart is empty</p>
            </div>
          ) : (
            <div className="space-y-4">
              {cartItems.map(item => (
                <div key={`${item.CartID}-${item.VariantID}`} className="flex items-center space-x-4 bg-gray-50 p-4 rounded-xl">
                  <img
                    src={item.image}
                    alt={item.ProductName}
                    className="w-20 h-20 object-cover rounded-lg"
                  />
                  <div className="flex-1">
                    <h3 className="font-semibold text-gray-800">{item.ProductName}</h3>
                    <p className="text-sm text-gray-600">{item.Brand}</p>
                    <p className="text-xs text-gray-500">
                      {item.colour} • {item.size} • {item.Model}
                    </p>
                    <p className="text-lg font-bold text-green-600">
                      ${item.UnitPrice.toLocaleString()}
                    </p>
                  </div>
                  <div className="flex items-center space-x-3">
                    <button
                      onClick={() => updateQuantity(item.CartID, item.VariantID, -1)}
                      className="p-1 bg-gray-200 hover:bg-gray-300 rounded-full"
                    >
                      <Minus size={16} />
                    </button>
                    <span className="font-semibold text-lg w-8 text-center">
                      {item.Quantity}
                    </span>
                    <button
                      onClick={() => updateQuantity(item.CartID, item.VariantID, 1)}
                      className="p-1 bg-gray-200 hover:bg-gray-300 rounded-full"
                    >
                      <Plus size={16} />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {cartItems.length > 0 && (
          <div className="border-t bg-gray-50 p-6">
            <div className="flex justify-between items-center mb-4">
              <span className="text-xl font-semibold">Total:</span>
              <span className="text-2xl font-bold text-green-600">
                ${getTotalPrice().toLocaleString()}
              </span>
            </div>
            
            <div className="space-y-3">
              <div className="flex space-x-3">
                <div className="flex items-center space-x-2 flex-1">
                  <Store size={20} className="text-blue-500" />
                  <label className="flex items-center space-x-2">
                    <input type="radio" name="delivery" defaultChecked className="text-blue-500" />
                    <span>Store Pickup (Free)</span>
                  </label>
                </div>
                <div className="flex items-center space-x-2 flex-1">
                  <Truck size={20} className="text-green-500" />
                  <label className="flex items-center space-x-2">
                    <input type="radio" name="delivery" className="text-green-500" />
                    <span>Standard Delivery</span>
                  </label>
                </div>
              </div>
              
              <div className="flex space-x-3">
                <div className="flex items-center space-x-2 flex-1">
                  <Package size={20} className="text-orange-500" />
                  <label className="flex items-center space-x-2">
                    <input type="radio" name="payment" defaultChecked className="text-orange-500" />
                    <span>Cash on Delivery</span>
                  </label>
                </div>
                <div className="flex items-center space-x-2 flex-1">
                  <CreditCard size={20} className="text-purple-500" />
                  <label className="flex items-center space-x-2">
                    <input type="radio" name="payment" className="text-purple-500" />
                    <span>Card Payment</span>
                  </label>
                </div>
              </div>
            </div>

            <button
              onClick={handleCheckout}
              className="w-full mt-4 bg-gradient-to-r from-green-500 to-blue-500 text-white font-bold py-3 px-6 rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300"
            >
              {currentUser ? 'Place Order' : 'Login to Checkout'}
            </button>
          </div>
        )}
      </div>
    </div>
  );

  const LoginModal = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl shadow-2xl w-full max-w-md">
          <div className="bg-gradient-to-r from-blue-500 to-purple-500 text-white p-6 rounded-t-2xl">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold">Login</h2>
              <button
                onClick={() => setShowLogin(false)}
                className="text-white hover:bg-white/20 p-2 rounded-full"
              >
                ×
              </button>
            </div>
          </div>

          <form
            onSubmit={(e) => {
              e.preventDefault();
              handleLogin(email, password);
            }}
            className="p-6 space-y-4"
          >
            <div>
              <label className="block text-gray-700 font-medium mb-2">Email</label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              />
            </div>
            <div>
              <label className="block text-gray-700 font-medium mb-2">Password</label>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              />
            </div>
            <button
              type="submit"
              className="w-full bg-gradient-to-r from-blue-500 to-purple-500 text-white font-bold py-3 px-6 rounded-lg hover:shadow-lg transform hover:scale-105 transition-all duration-300"
            >
              Login
            </button>
          </form>

          <div className="px-6 pb-6 text-center">
            <p className="text-gray-600">
              Don't have an account?{' '}
              <button className="text-blue-500 hover:text-blue-600 font-medium">
                Sign Up
              </button>
            </p>
          </div>
        </div>
      </div>
    );
  };

  const ProductModal = () => {
    if (!selectedProduct) return null;
    
    const productVariants = getProductVariants(selectedProduct.ProductID);
    const currentPrice = getSelectedVariantPrice(selectedProduct.ProductID);
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden">
          <div className="bg-gradient-to-r from-blue-500 to-purple-500 text-white p-6">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold">Product Details</h2>
              <button
                onClick={() => setSelectedProduct(null)}
                className="text-white hover:bg-white/20 p-2 rounded-full"
              >
                ×
              </button>
            </div>
          </div>

          <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
            <div className="grid md:grid-cols-2 gap-8">
              <div>
                <img
                  src={selectedProduct.image}
                  alt={selectedProduct.ProductName}
                  className="w-full h-96 object-cover rounded-xl shadow-lg"
                />
              </div>
              
              <div className="space-y-6">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                      {selectedProduct.Brand}
                    </span>
                    <div className="flex items-center space-x-1">
                      <Star size={20} className="text-yellow-400 fill-current" />
                      <span className="font-medium">{selectedProduct.rating}</span>
                      <span className="text-gray-500">({selectedProduct.reviews} reviews)</span>
                    </div>
                  </div>
                  <h1 className="text-3xl font-bold text-gray-900 mb-4">
                    {selectedProduct.ProductName}
                  </h1>
                  <p className="text-gray-600 text-lg mb-6">
                    {selectedProduct.Description}
                  </p>
                </div>

                {/* Variant Selection */}
                {productVariants.length > 1 && (
                  <div className="space-y-4">
                    <div>
                      <h3 className="font-semibold text-gray-800 mb-2">Color</h3>
                      <div className="flex flex-wrap gap-2">
                        {[...new Set(productVariants.map(v => v.colour))].map(colour => (
                          <button
                            key={colour}
                            onClick={() => setSelectedVariant({
                              ...selectedVariant,
                              [selectedProduct.ProductID]: {
                                ...selectedVariant[selectedProduct.ProductID],
                                colour: colour
                              }
                            })}
                            className={`px-4 py-2 rounded-lg font-medium transition-all ${
                              (selectedVariant[selectedProduct.ProductID]?.colour || productVariants[0].colour) === colour
                                ? 'bg-blue-500 text-white shadow-lg'
                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                            }`}
                          >
                            {colour}
                          </button>
                        ))}
                      </div>
                    </div>
                    
                    <div>
                      <h3 className="font-semibold text-gray-800 mb-2">Storage/Size</h3>
                      <div className="flex flex-wrap gap-2">
                        {[...new Set(productVariants.map(v => v.size))].map(size => (
                          <button
                            key={size}
                            onClick={() => setSelectedVariant({
                              ...selectedVariant,
                              [selectedProduct.ProductID]: {
                                ...selectedVariant[selectedProduct.ProductID],
                                size: size
                              }
                            })}
                            className={`px-4 py-2 rounded-lg font-medium transition-all ${
                              (selectedVariant[selectedProduct.ProductID]?.size || productVariants[0].size) === size
                                ? 'bg-purple-500 text-white shadow-lg'
                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                            }`}
                          >
                            {size}
                          </button>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                <div className="border-t pt-6">
                  <div className="flex items-center justify-between mb-4">
                    <div>
                      <span className="text-3xl font-bold text-green-600">
                        ${currentPrice.toLocaleString()}
                      </span>
                      {currentPrice !== selectedProduct.Base_price && (
                        <span className="text-xl text-gray-400 line-through ml-3">
                          ${selectedProduct.Base_price.toLocaleString()}
                        </span>
                      )}
                    </div>
                    <div className="text-green-600 font-medium">
                      ✓ In Stock
                    </div>
                  </div>

                  <button
                    onClick={() => {
                      addToCart(selectedProduct);
                      setSelectedProduct(null);
                    }}
                    className="w-full bg-gradient-to-r from-blue-500 to-purple-500 text-white font-bold py-4 px-6 rounded-xl hover:shadow-lg transform hover:scale-105 transition-all duration-300 flex items-center justify-center space-x-2"
                  >
                    <ShoppingCart size={24} />
                    <span className="text-lg">Add to Cart</span>
                  </button>
                </div>

                <div className="border-t pt-6 space-y-3">
                  <div className="flex items-center space-x-3">
                    <Truck size={20} className="text-blue-500" />
                    <span className="text-gray-700">Free delivery on orders over $500</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <Store size={20} className="text-green-500" />
                    <span className="text-gray-700">Available for store pickup</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <Package size={20} className="text-purple-500" />
                    <span className="text-gray-700">1 year warranty included</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const ProfilePage = () => (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
          <div className="bg-gradient-to-r from-blue-500 to-purple-500 text-white p-8">
            <div className="flex items-center space-x-6">
              <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center">
                <User size={40} />
              </div>
              <div>
                <h1 className="text-3xl font-bold">{currentUser?.UserName}</h1>
                <p className="text-blue-100">{currentUser?.Email}</p>
                <p className="text-sm text-blue-200">Customer since January 2024</p>
              </div>
            </div>
          </div>

          <div className="p-8">
            <div className="grid md:grid-cols-2 gap-8">
              <div>
                <h2 className="text-2xl font-bold text-gray-800 mb-6">Account Information</h2>
                <div className="space-y-4">
                  <div>
                    <label className="block text-gray-600 font-medium mb-1">Full Name</label>
                    <input
                      type="text"
                      value={currentUser?.UserName || ''}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                      readOnly
                    />
                  </div>
                  <div>
                    <label className="block text-gray-600 font-medium mb-1">Email</label>
                    <input
                      type="email"
                      value={currentUser?.Email || ''}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                      readOnly
                    />
                  </div>
                  <div>
                    <label className="block text-gray-600 font-medium mb-1">Phone</label>
                    <input
                      type="tel"
                      placeholder="Add phone number"
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-gray-600 font-medium mb-1">Address</label>
                    <textarea
                      placeholder="Add your address"
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                      rows="3"
                    />
                  </div>
                </div>
              </div>

              <div>
                <h2 className="text-2xl font-bold text-gray-800 mb-6">Order History</h2>
                {orderHistory.length === 0 ? (
                  <div className="text-center py-8">
                    <Package size={48} className="mx-auto text-gray-300 mb-4" />
                    <p className="text-gray-500">No orders yet</p>
                    <button
                      onClick={() => setCurrentPage('home')}
                      className="mt-4 bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors"
                    >
                      Start Shopping
                    </button>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {orderHistory.map(order => (
                      <div key={order.OrderID} className="bg-gray-50 p-4 rounded-xl">
                        <div className="flex justify-between items-start mb-2">
                          <div>
                            <h3 className="font-semibold text-gray-800">
                              Order #{order.OrderID}
                            </h3>
                            <p className="text-sm text-gray-600">
                              {new Date(order.OrderDate).toLocaleDateString()}
                            </p>
                          </div>
                          <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium">
                            {order.Status}
                          </span>
                        </div>
                        <div className="flex justify-between items-end">
                          <p className="text-sm text-gray-600">
                            {order.items.length} item(s)
                          </p>
                          <p className="text-lg font-bold text-green-600">
                            ${order.TotalAmount.toLocaleString()}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>

            <div className="flex justify-between items-center mt-8 pt-8 border-t">
              <button
                onClick={() => setCurrentPage('home')}
                className="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition-colors"
              >
                Back to Shopping
              </button>
              <button
                onClick={() => {
                  setCurrentUser(null);
                  setCurrentPage('home');
                }}
                className="bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600 transition-colors"
              >
                Logout
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const HomePage = () => (
    <div>
      {/* Hero Section */}
      <section className="bg-gradient-to-br from-blue-600 via-purple-600 to-pink-500 text-white py-20">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-yellow-300 to-orange-300 bg-clip-text text-transparent">
            Welcome to BrightBuy
          </h1>
          <p className="text-xl md:text-2xl mb-8 text-blue-100">
            Your one-stop shop for the latest electronics and gadgets
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button 
              onClick={() => setSelectedCategory('1')}
              className="bg-white text-blue-600 px-8 py-4 rounded-full font-bold hover:shadow-xl transform hover:scale-105 transition-all duration-300"
            >
              Shop Smartphones
            </button>
            <button 
              onClick={() => setSelectedCategory('3')}
              className="bg-gradient-to-r from-yellow-400 to-orange-500 text-white px-8 py-4 rounded-full font-bold hover:shadow-xl transform hover:scale-105 transition-all duration-300"
            >
              Explore Laptops
            </button>
          </div>
        </div>
      </section>

      {/* Featured Categories */}
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center text-gray-800 mb-12">
            Shop by Category
          </h2>
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-6">
            {categories.slice(0, 10).map(category => (
              <button
                key={category.CategoryID}
                onClick={() => setSelectedCategory(category.CategoryID.toString())}
                className="bg-white p-6 rounded-2xl shadow-lg hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-300 text-center group"
              >
                <div className="w-16 h-16 bg-gradient-to-r from-blue-400 to-purple-500 rounded-2xl mx-auto mb-4 flex items-center justify-center group-hover:scale-110 transition-transform">
                  <Package size={32} className="text-white" />
                </div>
                <h3 className="font-semibold text-gray-800 group-hover:text-blue-600 transition-colors">
                  {category.CategoryName}
                </h3>
              </button>
            ))}
          </div>
        </div>
      </section>

      {/* Products Grid */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <div className="flex justify-between items-center mb-8">
            <h2 className="text-4xl font-bold text-gray-800">
              {selectedCategory === 'all' ? 'All Products' : 
                categories.find(c => c.CategoryID.toString() === selectedCategory)?.CategoryName || 'Products'}
            </h2>
            <div className="flex items-center space-x-4">
              <Filter size={20} className="text-gray-600" />
              <select className="border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                <option>Sort by Price</option>
                <option>Price: Low to High</option>
                <option>Price: High to Low</option>
                <option>Best Rating</option>
              </select>
            </div>
          </div>

          {filteredProducts.length === 0 ? (
            <div className="text-center py-16">
              <Search size={64} className="mx-auto text-gray-300 mb-4" />
              <p className="text-xl text-gray-500">No products found</p>
              <p className="text-gray-400">Try adjusting your search or category filter</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
              {filteredProducts.map(product => (
                <ProductCard key={product.ProductID} product={product} />
              ))}
            </div>
          )}
        </div>
      </section>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-100">
      <HeaderComponent />
      <CategoryNav />
      
      {currentPage === 'home' && <HomePage />}
      {currentPage === 'profile' && <ProfilePage />}
      
      {showCart && <CartModal />}
      {showLogin && <LoginModal />}
      {selectedProduct && <ProductModal />}

      {/* Footer */}
      <footer className="bg-gray-800 text-white py-12 mt-16">
        <div className="container mx-auto px-4">
          <div className="grid md:grid-cols-4 gap-8">
            <div>
              <h3 className="text-2xl font-bold mb-4 bg-gradient-to-r from-yellow-300 to-orange-300 bg-clip-text text-transparent">
                BrightBuy
              </h3>
              <p className="text-gray-300">
                Your trusted electronics retailer in Texas. Quality products, great prices, exceptional service.
              </p>
            </div>
            <div>
              <h4 className="font-semibold mb-4">Quick Links</h4>
              <ul className="space-y-2 text-gray-300">
                <li><button className="hover:text-white transition-colors">About Us</button></li>
                <li><button className="hover:text-white transition-colors">Contact</button></li>
                <li><button className="hover:text-white transition-colors">Store Locations</button></li>
                <li><button className="hover:text-white transition-colors">Careers</button></li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-4">Customer Service</h4>
              <ul className="space-y-2 text-gray-300">
                <li><button className="hover:text-white transition-colors">Help Center</button></li>
                <li><button className="hover:text-white transition-colors">Returns</button></li>
                <li><button className="hover:text-white transition-colors">Shipping Info</button></li>
                <li><button className="hover:text-white transition-colors">Warranty</button></li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-4">Connect</h4>
              <div className="flex space-x-4">
                <button className="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center hover:bg-blue-700 transition-colors">
                  f
                </button>
                <button className="w-10 h-10 bg-blue-400 rounded-full flex items-center justify-center hover:bg-blue-500 transition-colors">
                  t
                </button>
                <button className="w-10 h-10 bg-pink-600 rounded-full flex items-center justify-center hover:bg-pink-700 transition-colors">
                  i
                </button>
              </div>
            </div>
          </div>
          <div className="border-t border-gray-700 mt-8 pt-8 text-center text-gray-400">
            <p>&copy; 2024 BrightBuy Electronics. All rights reserved. | Texas, USA</p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default BrightBuyEcommerce;